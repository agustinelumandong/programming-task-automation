name: Daily Programming Challenge

on:
  schedule:
    - cron: "0 8 * * 1-5" # Weekdays at 8 AM UTC
  workflow_dispatch: # Manual trigger
    inputs:
      challenge_set:
        description: "Which challenge set to create"
        required: true
        default: "basic"
        type: choice
        options:
          - basic
          - intermediate
          - advanced
          - all

jobs:
  create-daily-challenges:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "day=$(date +'%A')" >> $GITHUB_OUTPUT

      - name: Create Challenge Set
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const challengeSet = '${{ github.event.inputs.challenge_set }}' || 'basic';
            const date = '${{ steps.date.outputs.date }}';
            const day = '${{ steps.date.outputs.day }}';

            const challenges = {
              basic: [
                {
                  number: 3,
                  title: 'Find Students with Highest Grades',
                  difficulty: 'Medium',
                  description: 'Write a function that finds and prints the names of students who have the highest grades from a given array of student objects.',
                  inputData: `students = [
              { name: 'marvin', grade: 89 },
              { name: 'kenth', grade: 85 },
              { name: 'jeff', grade: 95 },
            ];`,
                  requirements: [
                    'Find the highest grade in the array',
                    'Return/print the names of all students who have that highest grade',
                    'Handle cases where multiple students have the same highest grade',
                    'Include proper error handling for edge cases'
                  ],
                  topics: ['Array manipulation', 'Object property access', 'Finding maximum values', 'Filtering arrays']
                },
                {
                  number: 4,
                  title: 'Count Students Who Passed',
                  difficulty: 'Easy',
                  description: 'Write a function that counts how many students passed the exam (grade >= 70) from a given list of grades.',
                  inputData: `grades = [85, 42, 78, 91, 55, 73, 88, 39, 67, 94];`,
                  requirements: [
                    'Count the number of grades that are 70 or above',
                    'Return the total count of passing students',
                    'Optionally, also return the list of passing grades',
                    'Handle empty arrays gracefully'
                  ],
                  topics: ['Array filtering', 'Conditional logic', 'Counting algorithms', 'Array methods']
                }
              ],
              intermediate: [
                {
                  number: 5,
                  title: 'Calculate Grade Statistics',
                  difficulty: 'Medium',
                  description: 'Create a function that calculates comprehensive statistics for a class including average, median, mode, and grade distribution.',
                  inputData: `grades = [85, 42, 78, 91, 55, 73, 88, 39, 67, 94, 85, 78, 91];`,
                  requirements: [
                    'Calculate average grade',
                    'Find median grade',
                    'Determine mode (most frequent grade)',
                    'Create grade distribution (A, B, C, D, F)',
                    'Handle edge cases like empty arrays'
                  ],
                  topics: ['Statistical calculations', 'Array sorting', 'Frequency analysis', 'Mathematical operations']
                }
              ],
              advanced: [
                {
                  number: 6,
                  title: 'Optimize Student Grouping',
                  difficulty: 'Hard',
                  description: 'Create an algorithm that groups students into balanced teams based on their grades to ensure fair distribution.',
                  inputData: `students = [
              { name: 'alice', grade: 95 },
              { name: 'bob', grade: 78 },
              { name: 'charlie', grade: 88 },
              { name: 'diana', grade: 92 },
              { name: 'eve', grade: 85 },
              { name: 'frank', grade: 73 }
            ];`,
                  requirements: [
                    'Create balanced teams with similar average grades',
                    'Minimize the difference between team averages',
                    'Handle different team sizes',
                    'Optimize for fairness and balance'
                  ],
                  topics: ['Algorithm optimization', 'Load balancing', 'Combinatorial problems', 'Greedy algorithms']
                }
              ]
            };

            let challengesToCreate = [];
            if (challengeSet === 'all') {
              challengesToCreate = [...challenges.basic, ...challenges.intermediate, ...challenges.advanced];
            } else {
              challengesToCreate = challenges[challengeSet] || challenges.basic;
            }

            const createdIssues = [];

            for (const challenge of challengesToCreate) {
              const issueBody = `## Programming Problem - ${day} Challenge

            **Problem Number**: #${challenge.number}
            **Date**: ${date}
            **Difficulty**: ${challenge.difficulty}

            **Description**: 
            ${challenge.description}

            **Input Data**:
            \`\`\`javascript
            ${challenge.inputData}
            \`\`\`

            **Expected Output**:
            ${challenge.requirements.map(req => `- ${req}`).join('\n')}

            **Requirements**:
            - [ ] Implement the solution in JavaScript
            - [ ] Include clear comments explaining the logic
            - [ ] Handle edge cases appropriately
            - [ ] Provide efficient algorithm implementation
            - [ ] Include example usage and test cases
            - [ ] Explain time and space complexity

            **Difficulty Level**: ${challenge.difficulty}

            **Topics Covered**: 
            ${challenge.topics.map(topic => `- ${topic}`).join('\n')}

            ---

            **Instructions for @copilot**:
            Please solve this ${day} programming challenge by:
            1. Analyzing the given data structure carefully
            2. Implementing the most efficient solution
            3. Adding comprehensive comments explaining each step
            4. Including multiple solution approaches where applicable
            5. Providing example usage with the given data
            6. Explaining the time and space complexity
            7. Handling all edge cases thoroughly
            8. Adding unit tests or test cases

            @copilot please implement this solution with complete code examples and thorough documentation.`;

              try {
                const { data: issue } = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `${day} Programming Challenge #${challenge.number}: ${challenge.title}`,
                  body: issueBody,
                  labels: ['programming-challenge', 'copilot-task', `difficulty-${challenge.difficulty.toLowerCase()}`, `day-${day.toLowerCase()}`],
                  assignees: ['copilot']
                });
                
                createdIssues.push({
                  number: issue.number,
                  title: challenge.title,
                  difficulty: challenge.difficulty,
                  url: issue.html_url
                });
                
                console.log(`Created issue #${issue.number} for Problem ${challenge.number}: ${challenge.title}`);
              } catch (error) {
                console.error(`Failed to create issue for Problem ${challenge.number}:`, error);
              }
            }

            // Store created issues for email notification
            core.setOutput('created_issues', JSON.stringify(createdIssues));
            core.setOutput('challenge_count', createdIssues.length);

      - name: Send Daily Challenge Notification
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "üéØ Daily Programming Challenges - ${{ steps.date.outputs.day }}, ${{ steps.date.outputs.date }}"
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h1 style="color: #0366d6; text-align: center;">üéØ Daily Programming Challenges</h1>
              <h2 style="color: #586069; text-align: center;">${{ steps.date.outputs.day }}, ${{ steps.date.outputs.date }}</h2>
              
              <div style="background-color: #f6f8fa; padding: 20px; border-radius: 6px; margin: 20px 0;">
                <h3>üìö Today's Challenge Set: ${{ github.event.inputs.challenge_set || 'basic' }}</h3>
                <p>We've created <strong>${{ steps.create-daily-challenges.outputs.challenge_count }}</strong> new programming challenges for you!</p>
              </div>
              
              <div style="background-color: #e1f5fe; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <h3>ü§ñ Copilot Assignment Status</h3>
                <p>All challenges have been automatically assigned to <strong>@copilot</strong> and are now being processed.</p>
                <p>Expected timeline:</p>
                <ul>
                  <li>‚è∞ <strong>Analysis:</strong> 5-10 minutes</li>
                  <li>üíª <strong>Implementation:</strong> 15-30 minutes</li>
                  <li>üìù <strong>Documentation:</strong> 5-10 minutes</li>
                  <li>üîç <strong>Pull Request:</strong> Ready for review</li>
                </ul>
              </div>
              
              <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <h3>üìã What to Expect</h3>
                <p>Each solution will include:</p>
                <ul>
                  <li>‚úÖ Complete JavaScript implementation</li>
                  <li>‚úÖ Comprehensive code comments</li>
                  <li>‚úÖ Edge case handling</li>
                  <li>‚úÖ Performance analysis</li>
                  <li>‚úÖ Example usage and test cases</li>
                  <li>‚úÖ Multiple solution approaches (where applicable)</li>
                </ul>
              </div>
              
              <div style="background-color: #d4edda; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <h3>üéì Learning Outcomes</h3>
                <p>Today's challenges will help you master:</p>
                <ul>
                  <li>Array manipulation and filtering</li>
                  <li>Object property access and iteration</li>
                  <li>Algorithm optimization techniques</li>
                  <li>Error handling and edge cases</li>
                  <li>Code documentation best practices</li>
                </ul>
              </div>
              
              <div style="text-align: center; margin: 30px 0;">
                <a href="https://github.com/${{ github.repository }}/issues" 
                   style="background-color: #0366d6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                  üìñ View All Challenges
                </a>
              </div>
              
              <p style="margin-top: 30px; color: #586069; font-size: 12px; text-align: center;">
                Repository: ${{ github.repository }}<br>
                Challenge Set: ${{ github.event.inputs.challenge_set || 'basic' }}<br>
                Created: ${{ steps.date.outputs.date }}<br>
                You'll receive notifications when solutions are ready for review!
              </p>
            </div>
          to: sean.esparagoza@gmail.com
          from: GitHub Programming Challenge System
