name: Copilot Problem Generator

on:
  schedule:
    - cron: "0 10 * * 1-5" # Weekdays at 10 AM UTC
  workflow_dispatch: # Manual trigger
    inputs:
      topic:
        description: "Programming topic for Copilot to create problems about"
        required: false
        default: "JavaScript fundamentals"
        type: string
      difficulty:
        description: "Difficulty level preference"
        required: false
        default: "Mixed"
        type: choice
        options:
          - Easy
          - Medium
          - Hard
          - Mixed

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  generate-programming-problems:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Request Copilot to Generate Programming Problems
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const topic = '${{ github.event.inputs.topic }}' || 'JavaScript fundamentals';
            const difficulty = '${{ github.event.inputs.difficulty }}' || 'Mixed';
            const date = '${{ steps.date.outputs.date }}';

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Generate Programming Problems - ${topic} (${difficulty}) - ${date}`,
              body: `## Programming Problem Generation Request

            **Date**: ${date}
            **Topic**: ${topic}
            **Difficulty**: ${difficulty}

            ---

            **Instructions for @copilot**:

            Please create 2-3 unique programming challenges based on the topic "${topic}" with ${difficulty.toLowerCase()} difficulty level.

            For each programming problem, please create:

            1. **A clear problem description** explaining what needs to be solved
            2. **Sample input data** with realistic examples
            3. **Expected output specification** detailing what the solution should return
            4. **Requirements list** including edge cases to handle
            5. **Programming concepts** that the problem teaches

            **Format each problem as follows:**
            \`\`\`
            ## Problem #[NUMBER]: [TITLE]

            **Description**: [Clear explanation of what to solve]

            **Input Data**:
            \`\`\`javascript
            [Provide realistic sample data]
            \`\`\`

            **Expected Output**: [What the solution should return/do]

            **Requirements**:
            - Implement in JavaScript
            - Handle edge cases
            - Include error checking
            - Optimize for performance

            **Concepts**: [List programming concepts this teaches]
            \`\`\`

            Please make the problems:
            - ‚úÖ **Practical and realistic** (not just academic exercises)
            - ‚úÖ **Progressively challenging** if creating multiple problems
            - ‚úÖ **Teaching valuable programming concepts**
            - ‚úÖ **Include meaningful sample data**
            - ‚úÖ **Cover different programming paradigms** when possible

            Topics you could explore: ${topic}, data structures, algorithms, problem-solving patterns, real-world scenarios.

            @copilot please generate creative and educational programming problems based on these requirements.`,
              labels: ['copilot-task', 'problem-generation', `topic-${topic.replace(/\s+/g, '-').toLowerCase()}`, `difficulty-${difficulty.toLowerCase()}`],
              assignees: ['copilot']
            });

            console.log('Created problem generation request #' + issue.number);

      - name: Send Generation Request Notification
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ü§ñ Copilot Problem Generation Request - ${{ steps.date.outputs.date }}"
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #0366d6;">ü§ñ Problem Generation Request Sent</h2>
              <p>A request has been sent to GitHub Copilot to generate fresh programming challenges!</p>
              
              <div style="background-color: #f6f8fa; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <h3>üìã Generation Parameters</h3>
                <ul>
                  <li><strong>Topic:</strong> ${{ github.event.inputs.topic || 'JavaScript fundamentals' }}</li>
                  <li><strong>Difficulty:</strong> ${{ github.event.inputs.difficulty || 'Mixed' }}</li>
                  <li><strong>Date:</strong> ${{ steps.date.outputs.date }}</li>
                </ul>
              </div>
              
              <div style="background-color: #e1f5fe; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <h3>üéØ What Copilot Will Create</h3>
                <p>Copilot will generate 2-3 unique programming challenges including:</p>
                <ul>
                  <li>Clear problem descriptions</li>
                  <li>Realistic sample input data</li>
                  <li>Expected output specifications</li>
                  <li>Comprehensive requirements</li>
                  <li>Educational programming concepts</li>
                </ul>
              </div>
              
              <div style="background-color: #d4edda; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <h3>‚è∞ Next Steps</h3>
                <p>1. Copilot will analyze the request and create problems</p>
                <p>2. Once problems are generated, they'll be posted as issue comments</p>
                <p>3. You can then create separate issues for each problem</p>
                <p>4. Assign individual problems back to Copilot for solutions</p>
              </div>
              
              <p style="margin-top: 30px; color: #586069; font-size: 12px;">
                Repository: ${{ github.repository }}<br>
                Workflow: ${{ github.workflow }}<br>
                Generated: ${{ steps.date.outputs.date }}<br>
                This is a dynamic problem generation system!
              </p>
            </div>
          to: sean.esparagoza@gmail.com
          from: GitHub Copilot Problem Generator
